README for libtransform bundle.

Questions?  Issues?
   * http://libarchive.googlecode.com/ is the home for ongoing
     development, including issue tracker, additional
     documentation, and links to the appropriate mailing lists.

This distribution bundle includes the following components:
   * libtransform: a library for reading and writing streaming transforms
   * examples: Some small example programs that you may find useful.
   * contrib:  Various items sent to me by third parties;
          please contact the authors with any questions.

The top-level directory contains the following information files:
   * NEWS - highlights of recent changes
   * COPYING - what you can do with this
   * INSTALL - installation instructions
   * README - this file
   * configure - configuration script, see INSTALL for details.
   * CMakeLists.txt - input for "cmake" build tool, see INSTALL

The following files in the top-level directory are used by the
'configure' script:
   * Makefile.am, aclocal.m4, configure.ac
       - used to build this distribution, only needed by maintainers
   * Makefile.in, config.h.in
	- templates used by configure script

Guide to Documentation installed by this system:
 * libtransform.3 gives an overview of the library as a whole
 * transform_read.3, transform_write.3 provide detailed calling
   sequences for the read and write APIs
The manual pages above are provided in the 'doc' directory in
a number of different formats.

You should also read the copious comments in "transform.h" and the
source code for the sample programs for more details.  Please let me
know about any errors or omissions you find.

Currently, the library automatically detects and reads the following:
  * gzip compression
  * bzip2 compression
  * compress/LZW compression
  * lzma and xz compression

The library can write:
  * gzip compression
  * bzip2 compression
  * compress/LZW compression
  * lzma and xz compression

Notes about the library architecture:

 * This is a heavily stream-oriented system.  There is no direct
   support for in-place modification or random access.

 * I've attempted to minimize static link pollution.  If you don't
   explicitly invoke a particular feature (such as support for a
   particular compression), it won't get pulled in.
   In particular, if you don't explicitly enable a particular
   compression or decompression support, you won't need to link
   against the corresponding compression or decompression libraries.
   This also reduces the size of statically-linked binaries in
   environments where that matters.

 * On read, the library accepts whatever blocks you hand it.
   Your read callback is free to pass the library a byte at a time
   or mmap the entire transform and give it to the library at once.

 * The object-style approach allows you to have multiple transform streams
   open at once.

 * The transform itself is read/written using callback functions.
   You can read an transform directly from an in-memory buffer or
   write it to a socket, if you wish.  There are some utility
   functions to provide easy-to-use "open file," etc, capabilities.

 * The read/write APIs are designed to allow individual entries
   to be read or written to any data source:  You can create
   a block of data in memory and add it to a tar transform without
   first writing a temporary file.  You can also read an entry from
   an transform and write the data directly to a socket.  If you want
   to read/write entries to disk, there are convenience functions to
   make this especially easy.
