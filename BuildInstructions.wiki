#summary How to compile and install libarchive, bsdtar, and bsdcpio from source code.

= Using _configure_ (for Linux, FreeBSD, Solaris and other Unix-like systems) =

The libarchive distribution includes a standard
autoconf-generated "configure" script that should
build and install libarchive, bsdtar, and bsdcpio
on almost any POSIX-like system.

Typical installation:
 # `tar xzf libarchive-2.6.1.tar.gz` ([BootstrappingTar if you don't have a tar program])
 # `cd libarchive-2.6.1`
 # `./configure`
 # `make`
 # `make check`
 # `make install`

== Configure options ==

By default, the configure-based build will build
the libarchive library and bsdtar command-line tool.
It will install these into standard default locations.
The configure program will attempt to automatically
locate all other libraries and tools required.

You can modify this by providing additional options
to the `configure` program:
 * `./configure --help`  -- Lists all available options
 * `./configre --disable-bsdtar`  -- Suppresses build and install of bsdtar
 * `./configure --enable-bsdcpio` -- Enables build and install of bsdcpio

= Using _cmake_ (for most everything else) =

*Starting with libarchive 2.6.990*, there is a cmake-based
build system that can generate configuration files for
a variety of IDEs, including
Visual Studio on Windows and XCode on Mac OS.
*This does not work for any earlier version.*

== General usage ==

This build system uses the _cmake_ tool to generate
appropriate solution, project, or Makefiles for your
system.

You will first need to obtain and install the appropriate
version of the cmake tool for your platform.
If your favorite package manager doesn't have a version
already configured for your platform, you should check
http://cmake.org/

When you run the cmake tool, you need to provide two
pieces of information:
 * The "generator" appropriate for the IDE you're using.
 * The directory containing the unpacked libarchive sources.  This is the directory containing the `CMakeLists.txt` file.

== Windows/Visual Studio ==

You'll need the appropriate development tools if you don't already have them:
 * A free version of Visual Studio C++ is available from Microsoft: http://www.microsoft.com/express/download/
 * You'll also need the CMake program for Windows, version 2.6 or later:  http://www.cmake.org/cmake/resources/software.html
 * If you want to check out source from SVN, I highly recommend [http://tortoisesvn.tigris.org TortoiseSVN].  You can also, of course, use the SVN command-line tool.

To build the source, you use CMake to construct a Visual Studio _solution_ file, then open that in Visual Studio:
 * Get the source code.  You can either:
   * Unpack a source distribution *version 2.6.990 or later* from [http://code.google.com/p/libarchive/downloads/list the Downloads page], or
   * Use SVN to checkout the source from the [http://code.google.com/p/libarchive/source/checkout Source Repository].
 * Use CMake to create the solution files:
   * Set source code parameter to the directory where you unpacked the source code (the directory containing the "CmakeLists.txt" file)
   * Set the build output parameter to the same directory. (XXX why is this necessary? XXX)
   * Click *configure* in the CMake GUI.
   * (XXX probably need a screenshot to illustrate here XXX) "Get a screen with a lot of uninteresting red stuff.  Stuff that might interest you (enabling zlib and bzip2) are nowhere to see (?)."
   * Click *configure* again.  (XXX why is this necessary? XXX)
   * Click *OK*
 * Use Visual Studio to build the system:
   * Open the generated `libarchive.sln` in Visual Studio 9
   * Click *Rebuild Solution* to compile everything.

XXX How to build/run test programs? XXX

XXX How to link against zlib/bzlib/lzmadec? XXX

== Windows/MinGW ==

XXX details ? XXX

== MacOS/Xcode ==

You'll first need some standard development tools if you don't already have them:
 * Xcode itself is distributed with most new Macs on DVD.  The newest version is available from http://developer.apple.com/ after you sign up for a free Apple Developer Connection membership.
 * The !MacPorts package manager can install a variety of open-source software (http://www.macports.org/).  If you just want to use libarchive, you can skip all of the following by installing libarchive through !MacPorts: `sudo port install libarchive`
 * The cmake tool is available through !MacPorts: `sudo port install cmake`
 * The Subversion command-line tool for checking out source from !GoogleCode is also available through !MacPorts: `sudo port install subversion`

Assuming that the libarchive source code is available in the 'libarchive' directory, you build the Xcode project files using cmake:
 * `cmake -G Xcode libarchive`

You can then open `libarchive.xcodeproj` from within Xcode (or double-click it in Finder) to build, run, and debug the software.

To run the tests, you'll need to manually adjust a few settings (if you know how to embed these into CMakeLists.txt so that this doesn't need to be done manually, please let me know!):
 * Executable -> libarchive_test, Ctrl-Click, then "Get-Info".  On the "Arguments" pane, set "-r _<Path to libarchive source>_/libarchive/test" so that the test program can read the files it needs.
 * Executable -> bsdtar_test, Ctrl-Click, then "Get-Info".  On the "Arguments" pane, add "-r _<Path to libarchive root>_/tar/test" and "-p _<Path to compiled bsdtar executable>_"
 * Executable -> bsdcpio_test, Ctrl-Click, then "Get-Info".  On the "Arguments" pane, add "-r _<Path to libarchive root>_/cpio/test" and "-p _<Path to compiled bsdcpio executable>_"