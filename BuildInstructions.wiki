#summary How to compile and install libarchive, bsdtar, and bsdcpio from source code.

= Using _configure_ (for Linux, FreeBSD, Solaris and other Unix-like systems) =

The libarchive distribution includes a standard
autoconf-generated "configure" script that should
build and install libarchive, bsdtar, and bsdcpio
on almost any POSIX-like system.

Typical installation:
 # `tar xzf libarchive-2.6.1.tar.gz`
 # `cd libarchive-2.6.1`
 # `./configure`
 # `make`
 # `make check`
 # `make install`

== Configure options ==

By default, the configure-based build will build
the libarchive library and bsdtar command-line tool.
It will install these into standard default locations.
The configure program will attempt to automatically
locate all other libraries and tools required.

You can modify this by providing additional options
to the `configure` program:
 * `./configure --help`  -- Lists all available options
 * `./configre --disable-bsdtar`  -- Suppresses build and install of bsdtar
 * `./configure --enable-bsdcpio` -- Enables build and install of bsdcpio

= Using _cmake_ (for most everything else) =

*Starting with libarchive 2.7*, there is a cmake-based
build system that can generate configuration files for
a variety of IDEs, including
Visual Studio on Windows and XCode on Mac OS.

== General usage ==

This build system uses the _cmake_ tool to generate
appropriate solution, project, or Makefiles for your
system.

You will first need to obtain and install the appropriate
version of the cmake tool for your platform.
If your favorite package manager doesn't have a version
already configured for your platform, you should check
http://cmake.org/

When you run the cmake tool, you need to provide two
pieces of information:
 * The "generator" appropriate for the IDE you're using.
 * The directory containing the unpacked libarchive sources.  This is the directory containing the `CMakeLists.txt` file.

== Windows/Visual Studio ==

* A free version of Visual Studio C++ is available from Microsoft: http://www.microsoft.com/express/download/
* You'll also need the CMake program for Windows:  http://www.cmake.org/cmake/resources/software.html
* Click *configure* in the CMake GUI.  (XXX more details? screen shot? XXX)
* Open `libarchive.sln` in Visual Studio
* Use *Build Solution* to compile everything.

Note: If you are using the source from SVN and don't have some version of Yacc or Bison installed on your system, the *configure* step above will fail with a message `"Can't find tar/getdate.c"`.  You can get a copy of this file by downloading any recent source package from the "Downloads" area.

== Windows/MinGW ==

XXX details ? XXX

== MacOS/Xcode ==

You'll first need some standard development tools if you don't already have them:
 * Xcode itself is distributed with most new Macs on DVD.  The newest version is available from http://developer.apple.com/ after you sign up for a free Apple Developer Connection membership.
 * The !MacPorts package manager can install a variety of open-source software (http://www.macports.org/).  If you just want to use libarchive, you can install it via !MacPorts: `sudo port install libarchive`
 * The cmake tool is available through !MacPorts: `sudo port install cmake`
 * The Subversion command-line tool for checking out source from GoogleCode is also available through !MacPorts: `sudo port install subversion`

Assuming that the libarchive source code is available in the 'libarchive' directory, you build the Xcode project files using cmake:
 * `cmake -G Xcode libarchive`

You can then open `libarchive.xcodeproj` from within Xcode (or double-click it in Finder) to build, run, and debug the software.

To run the tests, you'll need to manually adjust a few settings (if you know how to embed these into CMakeLists.txt so that this doesn't need to be done manually, please let me know!):
 * Executable -> libarchive_test, Ctrl-Click, then "Get-Info".  On the "Arguments" pane, set "-r _<Path to libarchive source>_/libarchive/test" so that the test program can read the files it needs.
 * Executable -> bsdtar_test, Ctrl-Click, then "Get-Info".  On the "Arguments" pane, add "-r _<Path to libarchive root>_/tar/test" and "-p _<Path to compiled bsdtar executable>_"
 * Executable -> bsdcpio_test, Ctrl-Click, then "Get-Info".  On the "Arguments" pane, add "-r _<Path to libarchive root>_/cpio/test" and "-p _<Path to compiled bsdcpio executable>_"