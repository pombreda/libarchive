#summary Release notes for past and future libarchive versions.

Also see [WishList] for new feature ideas that would be nice to see
someday but aren't in the following schedule.
Since libarchive depends entirely on volunteer labor, the scheduling
here is pure guesswork.
The reality will depend on who is interested enough to actually do
the work.

= Libarchive 3.0 =

_Future release: Expected mid 2010_

Major version number bumps indicate backwards-incompatible API changes.
There are a handful of API changes that I'd like to make but I do try hard to break the API as infrequently as possible, so I'm deferring these until there's enough here to justify the pain:
  * Replace off_t with int64_t in the public headers.  Linux has two different off_t definitions, which gets very confusing.  Windows only has 32-bit off_t, which is pretty limiting.  Switching to int64_t will ensure consistent 64-bit file size handling on all platforms.
  * Linux support for both stat32 and stat64.  The preprocessor headaches here seem unavoidable.
  * Eliminate dev/ino pairs from the public API.  Windows doesn't deal gracefully with this.  I think the few uses of this can be rephrased in terms of open file handles (the core requirement for "skip file" support is the ability to determine whether a file name and an open file descriptor refer to the same file).
  * Thread-safe archive_write_disk.  This requires that you "open" an archive_write_disk object by giving it a base directory and requires that we find ways to eliminate the chdir() and umask() operations from the current code.
  * Fix the awkward "options" naming conflict; archive_write_disk_options() is nothing like archive_write_options() and archive_read_options().
  * Stackable write filters.  The stackable read filters have made the read side a lot more straightforward.  The write side should do this as well.  This may require changing the archive_write_disk API so that blocking is handled by explicitly adding a blocking filter.

= Libarchive 2.9 =

_Future Release_

 * NFSv4 ACL support - I have done some research and think I have a good grasp of the requirements for this.
 * Exploit seekable input - Files support seeking and Zip and ISO both work better when this is available.  But I still want Zip and ISO to be usable when the input can't seek.


= Libarchive 2.8 =

_Future release: Expected late 2009_

The following are expected, but not yet implemented.  They may be pushed to a later release.
 * zisofs support - This should be straightforward; the zip reader already illustrates how to decompress gzipped bodies.
 * MinGW fixes - libarchive 2.7 works well with Visual Studio and Cygwin but still has problems under MinGW.

The following are implemented and will likely be included in this release:
 * Zip writer - Anselm Strauss implemented most of this for Google Summer of Code 2008.  Joerg Sonnenberger worked out the remaining issues.
 * Many improvements to Windows support in general.  A lot of code has been edited to use portable ANSI/ISO C instead of Posix system calls; a lot of code is being taught to use Win32 API calls when built on Windows; a lot of tar and cpio code is being updated to use higher-level libarchive services that lessen the need for tar and cpio to be aware of system-specific details.

= Libarchive 2.7.1 =

_Future release_: Expected August, 2009

 * Issue 30: Fix reading xz-compressed archives that require large decompression buffers
 * Issue 24: Fix hang reading truncated ISO archives.
 * Issue 25: Fix reading body of first regular file in mtree archive.
 * Issue 21: Work around timezone-related test failure (better fix will be in 2.8)
 * Fix failure to read gzip files signed with gzsig (and other gzip files with "extra data")

= Libarchive 2.7.0 =

_Released April 17, 2009_

 * Much improved Windows support, thanks largely to Michihiro NAKAJIMA.  In particular, the test suites now build and run on Windows.
 * Support for building with "cmake" on a wide variety of platforms, thanks to Christian Ehrlicher and Michihiro.
 * Support for concatenated gzip streams.
 * Stackable read filter support.
 * Eliminated Yacc/Bison requirement for building by rewriting date parser in plain C.
 * Complete extended attribute support for FreeBSD, fixed extended attribute support for Linux
 * Improved support for AIX, Tru64, and GNU Hurd, thanks to Björn Jacke
 * Flexible options framework by Michihiro NAKAJIMA
 * Support for reading and writing XZ format, thanks to Per Øyvind Karlsen and Michihiro.
 * Support for reading Joliet extensions, thanks to Andreas Henriksson
 * Support for mtree hash and CRC options, thanks to Michihiro NAKAJIMA
 * Improved support for Cygwin, thanks to Charles Wilson

_Known Issues_

 * Building under MinGW is badly broken.  We plan to fix this for 2.8.
 * A couple of libarchive tests fail when built with Visual Studio because of error-handling differences between Windows and Posix system libraries.

= Libarchive 2.6.2 =

_Released February, 2009_
 * Fixed minor build issues on Linux and Solaris
 * Fixed bsdtar adding null bytes to shar archive output
 * Fixed crash when clients don't register skip callback

= Libarchive 2.6.1 =

_Released January, 2009_
 * Fixed Issue 1: archive.h doesn't export required definitions
 * Fixed Issue 3: Some empty entries in .zip files not extracted correctly
 * Fixed multiple substitutions in bsdtar -s
 * Fix an occasional failure extracting gzip-compressed archives
 * Fix minor build problems on Cygwin and a few other platforms

= Libarchive 2.6 =

_Released December, 2008_

 * LZMA read support, thanks to Miklos Vajna
 * Windows build improvements, thanks to Ivailo Petrov, Kees Zeelenberg, and Vishant Singh
 * New command-line parser provides uniform long-option support on all platforms
 * Birthtime support, thanks to Pedro Giffuni
 * archive_entry now tracks which values have been set.  In particular, this fixes a problem with extracting from zip archives that don't provide the file size in advance.  The restore-to-disk code now enforces file sizes only if a file size was specified.
 * Many small improvements to UTF8 and unicode handling.
 * mtree and shar performance improvements, thanks to Joerg Sonnenberger

= Libarchive 2.5 =

_Released July 2, 2008_

= Libarchive 2.4 =

_Released October, 2007_

= Libarchive 2.3 =

_Released September, 2007_

= Libarchive 2.2 =

_Released May, 2007_

= Libarchive 2.1 =

_Released April, 2007_

= Libarchive 2.0 =

_Released March, 2007_

Libarchive 2.0 fixed a couple of early API gaffes but mostly it introduced a regression suite that has helped immensely to improve stability.