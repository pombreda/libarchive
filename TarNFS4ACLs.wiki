#summary Storing NFSv4/NTFS ACLs in tar archives.
#labels tar,format

= Introduction =

_I have two goals for this page:  First, I want to
develop an understanding of prior art for archiving
NFSv4/NTFS ACLs.  With that in hand, I want to decide
on an approach to implement in libarchive.  Obviously,
it is possible for libarchive to read multiple formats,
though it's unlikely that I'll write more than one format,
certainly not in the first iteration._

NFSv4 ACLs are still pretty new and the existing support
varies widely.  The open-source communities are only beginning
to seriously implement them and most Linux and BSD systems still
lack support (even when the support has been implemented, it is
usually disabled by default in shipping distributions).
Unfortunately, NFSv4 does not define a portable format
for representing ACLs.  Anyone attempting to create a portable
way to store NFSv4 ACLs is likely going to have to implement
their own portable format, including all parsing routines,
since OS-specific library routines are unlikely to be useful.

= Apple version of GNU tar =

Apple stores the ACLs as an extended attribute named com.apple.acl.text
in the associated resource file.
(See [TarExtendedAttributes] for my attempt to document the resource file storage.)

I've not yet found documentation for the textual format used here, but it seems to use a large number of colon-separated fields for each entry:
 * type
 * 128-bit user/group GUID
 * User/group name
 * User/group ID
 * XXX document these ??? XXXX

The inclusion of both a POSIX-style numeric ID and a Windows-style GUID for each user and group is very interesting.  I would like for libarchive to support NFSv4/NTFS ACLs on both Windows and MacOS, at least eventually, so this will likely be required for libarchive as well.

= AIX tar =

AIX tar stores an additional 'A' entry after the regular
file entry.  The pathname of this entry is "NFS4", the body
is a binary formatted ACL.  Björn Jacke was kind enough
to send me an example.  This is the contents of the
'A' entry body:

{{{
00000400  4e 46 53 34 00 00 00 00  00 00 01 d4 00 00 00 01  |NFS4............|
00000410  00 00 00 0f 00 00 00 20  00 00 00 02 00 00 00 01  |....... ........|
00000420  00 00 00 01 00 00 00 00  00 00 00 20 4f 57 4e 45  |........... OWNE|
00000430  52 40 00 00 00 00 00 1c  00 00 00 00 00 00 00 cd  |R@..............|
00000440  00 00 00 01 00 00 00 00  00 01 00 26 00 00 00 00  |...........&....|
00000450  00 00 00 1c 00 00 00 00  00 00 00 d1 00 00 00 01  |................|
00000460  00 00 00 00 00 00 00 81  00 00 00 00 00 00 00 20  |............... |
00000470  00 00 00 02 00 00 00 01  00 00 00 00 00 00 00 00  |................|
00000480  00 0f 01 9f 4f 57 4e 45  52 40 00 00 00 00 00 20  |....OWNER@..... |
00000490  00 00 00 02 00 00 00 02  00 00 00 00 00 00 00 40  |...............@|
000004a0  00 00 00 81 47 52 4f 55  50 40 00 00 00 00 00 1c  |....GROUP@......|
000004b0  00 00 00 00 00 00 00 d0  00 00 00 00 00 00 00 00  |................|
000004c0  00 01 00 87 00 00 00 00  00 00 00 1c 00 00 00 00  |................|
000004d0  00 00 00 0d 00 00 00 00  00 00 00 40 00 01 00 87  |...........@....|
000004e0  00 00 00 00 00 00 00 1c  00 00 00 00 00 00 00 14  |................|
000004f0  00 00 00 00 00 00 00 40  00 01 00 87 00 00 00 00  |.......@........|
00000500  00 00 00 20 00 00 00 02  00 00 00 01 00 00 00 01  |... ............|
00000510  00 00 00 00 00 19 00 7f  4f 57 4e 45 52 40 00 00  |........OWNER@..|
00000520  00 00 00 20 00 00 00 02  00 00 00 02 00 00 00 01  |... ............|
00000530  00 00 00 40 00 1f 01 ff  47 52 4f 55 50 40 00 00  |...@....GROUP@..|
00000540  00 00 00 1c 00 00 00 00  00 00 00 d0 00 00 00 01  |................|
00000550  00 00 00 00 00 1f 01 ff  00 00 00 00 00 00 00 1c  |................|
00000560  00 00 00 00 00 00 00 0d  00 00 00 01 00 00 00 40  |...............@|
00000570  00 1f 01 ff 00 00 00 00  00 00 00 1c 00 00 00 00  |................|
00000580  00 00 00 14 00 00 00 01  00 00 00 40 00 1f 01 ff  |...........@....|
00000590  00 00 00 00 00 00 00 24  00 00 00 02 00 00 00 03  |.......$........|
000005a0  00 00 00 00 00 00 00 00  00 02 00 89 45 56 45 52  |............EVER|
000005b0  59 4f 4e 45 40 00 00 00  00 00 00 24 00 00 00 02  |YONE@......$....|
000005c0  00 00 00 03 00 00 00 01  00 00 00 00 00 01 00 26  |...............&|
000005d0  45 56 45 52 59 4f 4e 45  40 00 00 00              |EVERYONE@...|
}}}

And this is the textual ACL from the file on disk.
The relevant UIDs in this example are build=208, obnox=209, vl=205.
The relevant GIDs in this example are system=0, lp=11, snapp=13, mail=6, and perf=20.

{{{
s:(OWNER@):     d       x
u:vl:           d       wpxd
u:obnox:        d       ra
s:(OWNER@):     a       rwpRWaAdcCo
s:(GROUP@):     a       ra
u:build:        a       rwpad
g:snapp:        a       rwpad
g:perf:         a       rwpad
s:(OWNER@):     d       rwpRWxDdos
s:(GROUP@):     d       rwpRWxDaAdcCos
u:build:        d       rwpRWxDaAdcCos
g:snapp:        d       rwpRWxDaAdcCos
g:perf:         d       rwpRWxDaAdcCos
s:(EVERYONE@):  a       rRac
s:(EVERYONE@):  d       wpxd
}}}

It's interesting to note that the textual format is actually significantly more compact than the binary version.
Stripping spaces from the text version above gives 280 bytes versus 456 for the binary version.
Unfortunately, neither the binary or text formats used by AIX are suitable for archiving, since neither format provides both user/group names and IDs.

In addition, AIX tar's "A" record arrangement would be very difficult to support with libarchive, which expects all metadata to precede the file body.

== AIXC ACLs ==

Björn Jacke also sent me an example of the "AIXC" ACLs
used on AIX, which seem to be archived similarly by AIX tar.
In this case, the "A" entry is always named "AIXC".
Here's an sample body of such an "A" entry:

{{{
00000400  41 49 58 43 00 00 00 00  00 00 00 60 02 00 00 00  |AIXC.......`....|
00000410  00 00 00 06 00 04 00 04  00 0c 40 06 00 08 00 01  |..........@.....|
00000420  00 00 00 d0 00 14 80 04  00 08 00 01 00 00 00 d1  |................|
00000430  00 08 00 02 00 00 00 00  00 1c c0 04 00 08 00 01  |................|
00000440  00 00 00 cd 00 08 00 02  00 00 00 0b 00 08 00 02  |................|
00000450  00 00 00 06 00 14 40 06  00 08 00 02 00 00 00 0d  |......@.........|
00000460  00 08 00 02 00 00 00 14                           |........|
}}}

And here is a textual dump of the ACL from the corresponding
file on disk:

{{{
*
* ACL_type   AIXC
*
attributes:
base permissions
    owner(root):  rw-
    group(system):  r--
    others:  r--
extended permissions
    enabled
    permit   rw-     u:build
    deny     r--     u:obnox,g:system
    specify  r--     u:vl,g:lp,g:mail
    permit   rw-     g:snapp,g:perf
}}}


= Solaris tar? =

Solaris has generally been quick to include
support for new filesystem features in their version
of tar.  ZFS has NFSv4 ACLs, so I presume Solaris tar
can archive them.

= star? =

The star website and manpages have a couple of
oblique references to NFSv4 ACL support, but I've
not seen any documentation or announcement of such
functionality.