#summary Storing NFSv4/NTFS ACLs in tar archives.
#labels tar,format

= Introduction =

_I have two goals for this page:  First, I want to
develop an understanding of prior art for archiving
NFSv4/NTFS ACLs.  With that in hand, I want to decide
on an approach to implement in libarchive.  Obviously,
it is possible for libarchive to read multiple formats,
though it's unlikely that I'll write more than one format,
certainly not in the first iteration._

NFSv4 ACLs are still pretty new and the existing support
varies widely.  The open-source communities are only beginning
to seriously implement them and most Linux and BSD systems still
lack support (even when the support has been implemented, it is
usually disabled by default in shipping distributions).
Unfortunately, NFSv4 does not standardize a portable format
for representing ACLs.  Anyone attempting to create a portable
way to store NFSv4 ACLs is going to have to come up with a suitable
textual format and all of the parsing routines, since OS-specific
library routines are unlikely to be useful.

= Apple version of GNU tar =

Apple stores the ACLs as an extended attribute named com.apple.acl.text
in the associated resource file.
(See [TarExtendedAttributes] for my attempt to document the resource file storage.)

I've not yet found documentation for the textual format used here, but it seems to use a large number of colon-separated fields for each entry:
 * type
 * 128-bit user/group GUID
 * User/group name
 * User/group ID
 * XXX document these ??? XXXX

The inclusion of both a POSIX-style numeric ID and a Windows-style GUID for each user and group is very interesting.  I would like to support NFSv4/NTFS ACLs on both Windows and MacOS, at least eventually, so this will likely be required for libarchive as well.

= AIX tar =

AIX tar stores an additional 'A' entry after the regular
file entry.  The pathname of this entry is "AIXC", the body
is a binary formatted ACL.  Bj√∂rn Jacke was kind enough
to send me an example.  This is the contents of the
'A' entry body:

{{{
00000400  41 49 58 43 00 00 00 00  00 00 00 60 02 00 00 00  |AIXC.......`....|
00000410  00 00 00 06 00 04 00 04  00 0c 40 06 00 08 00 01  |..........@.....|
00000420  00 00 00 d0 00 14 80 04  00 08 00 01 00 00 00 d1  |................|
00000430  00 08 00 02 00 00 00 00  00 1c c0 04 00 08 00 01  |................|
00000440  00 00 00 cd 00 08 00 02  00 00 00 0b 00 08 00 02  |................|
00000450  00 00 00 06 00 14 40 06  00 08 00 02 00 00 00 0d  |......@.........|
00000460  00 08 00 02 00 00 00 14                           |........|
}}}

And here is a textual dump of the ACL from the corresponding
file on disk:

{{{
*
* ACL_type   AIXC
*
attributes:
base permissions
    owner(root):  rw-
    group(system):  r--
    others:  r--
extended permissions
    enabled
    permit   rw-     u:build
    deny     r--     u:obnox,g:system
    specify  r--     u:vl,g:lp,g:mail
    permit   rw-     g:snapp,g:perf
}}}

I don't see any reason to bother trying to support this
format in libarchive.  Besides the structural headache
(libarchive expects metadata before the file body, not
after), the binary format lacks textual user/group names
which are essential.

= Solaris tar? =

Solaris has generally been quick to include
support for new filesystem features in their version
of tar.  ZFS has NFSv4 ACLs, so I presume Solaris tar
can archive them.

= star? =

The star website and manpages have a couple of
oblique references to NFSv4 ACL support, but I've
not seen any documentation or announcement of such
functionality.